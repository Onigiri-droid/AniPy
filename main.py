import json
import os
import time
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
episode_tracker = {}
chat_ids = []
last_request_times = {}
request_interval = 12 * 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å–≤–µ–∂–µ–π –ø–æ–¥–±–æ—Ä–∫–∏ (12 —á–∞—Å–æ–≤)
episode_tracker_file = "episode_tracker.json"
chat_ids_file = "chat_ids.json"

API_TOKEN = '5160413773:AAGyjpQbrAL-1hR6bnV8GwDY3ioIjxBVRzk'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ
class Anime:
    def __init__(self, id, name, russian, image, score, episodes, episodes_aired, url, status, **kwargs):
        self.id = id
        self.name = name
        self.title = russian  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'russian' –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        self.image = f"https://shikimori.one{image['original']}"  # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.score = score
        self.episodes_all = episodes  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –≤—Å–µ–≥–æ
        self.episode = episodes_aired  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ–¥—à–∏—Ö —Å–µ—Ä–∏–π
        self.url = f"https://shikimori.one{url}"  # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∏–º–µ
        self.status = status  # –°—Ç–∞—Ç—É—Å –∞–Ω–∏–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–æ–Ω—Å)

    def format_anime(self):
        title = self.title if self.title else self.name
        episodes_all = str(self.episodes_all) if self.episodes_all > 0 else "?"
        return f"{title}\n–†–µ–π—Ç–∏–Ω–≥: {self.score} ‚≠êÔ∏è\n–°–µ—Ä–∏–∏: {self.episode} –∏–∑ {episodes_all} üì∫\n–°—Å—ã–ª–∫–∞: {self.url}"


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–æ–≤
def load_episode_tracker():
    global episode_tracker
    if os.path.exists(episode_tracker_file):
        try:
            with open(episode_tracker_file, "r", encoding="utf-8") as file:
                if os.stat(episode_tracker_file).st_size == 0:
                    episode_tracker = {}
                else:
                    episode_tracker = json.load(file)
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª episode_tracker.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            episode_tracker = {}
    else:
        logger.info("–§–∞–π–ª episode_tracker.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        episode_tracker = {}


# –ó–∞–≥—Ä—É–∑–∫–∞ chat_ids
def load_chat_ids():
    if os.path.exists(chat_ids_file):
        with open(chat_ids_file, 'r') as file:
            global chat_ids
            chat_ids = json.load(file)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–æ–≤
def save_episode_tracker():
    with open(episode_tracker_file, "w", encoding="utf-8") as file:
        json.dump(episode_tracker, file, ensure_ascii=False, indent=4)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_ids
def save_chat_ids():
    with open(chat_ids_file, 'w') as file:
        json.dump(chat_ids, file)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        save_chat_ids()

    keyboard = [['–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞']]  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∞–Ω–∏–º–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π üì∫ ‚ú®",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –∞–Ω–∏–º–µ
async def fresh_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if chat_id in last_request_times:
        if current_time - last_request_times[chat_id] < request_interval:
            await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–≤–µ–∂—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ ‚è∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚åõÔ∏è")
            return

    last_request_times[chat_id] = current_time
    animes = get_animes_from_shikimori()

    for anime in animes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∏–º–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ "–∞–Ω–æ–Ω—Å" –∏ —É –Ω–µ–≥–æ –≤—ã—à–ª–æ —Ö–æ—Ç—è –±—ã 1 —ç–ø–∏–∑–æ–¥
        if anime.status == "anons" or anime.episode == 0:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if anime.id in episode_tracker and anime.episode <= episode_tracker[anime.id]:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã

        episode_tracker[anime.id] = anime.episode
        save_episode_tracker()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if anime.image:
            try:
                await context.bot.send_photo(chat_id, photo=anime.image, caption=anime.format_anime())
            except Exception as e:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                await context.bot.send_message(chat_id, text=anime.format_anime())
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–µ {anime.name}: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(chat_id, text=anime.format_anime())


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
def get_current_season():
    year, month, _ = time.localtime()[:3]
    seasons = {
        12: "winter", 1: "winter", 2: "winter",
        3: "spring", 4: "spring", 5: "spring",
        6: "summer", 7: "summer", 8: "summer",
        9: "fall", 10: "fall", 11: "fall"
    }
    return f"{seasons[month]}_{year}"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∏–º–µ —Å Shikimori API
def get_animes_from_shikimori():
    season = get_current_season()
    url = f"https://shikimori.one/api/animes?season={season}&kind=tv&limit=99"
    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'pythonBot/1.0'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        animes_data = response.json()
        return [Anime(**anime) for anime in animes_data]
    except requests.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–µ: {e}")
        return []


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    load_episode_tracker()
    load_chat_ids()

    application = ApplicationBuilder().token(API_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fresh_anime))

    application.run_polling()


if __name__ == '__main__':
    main()
