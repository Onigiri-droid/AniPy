import json
import os
import time
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
subscriptions = {}  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–∞: {"chat_id": {"anime_id": episodes_aired}}
last_request_times = {}
request_interval = 12 * 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å–≤–µ–∂–µ–π –ø–æ–¥–±–æ—Ä–∫–∏ (12 —á–∞—Å–æ–≤)

subscriptions_file = "subscriptions.json"
API_TOKEN = '7326786329:AAGV9rOHiBTJElNPzuImbcxchqJPdUksW18'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ
class Anime:
    def __init__(self, id, name, russian, image, score, episodes, episodes_aired, **kwargs):
        self.id = id
        self.name = name
        self.title = russian  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'russian' –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        self.image = image
        self.score = score
        self.episodes_all = episodes  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –≤—Å–µ–≥–æ
        self.episodes_aired = episodes_aired  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ–¥—à–∏—Ö —Å–µ—Ä–∏–π

    def format_anime(self):
        title = self.title if self.title else self.name
        episodes_all = str(self.episodes_all) if self.episodes_all > 0 else "?"
        return f"{title}\n–†–µ–π—Ç–∏–Ω–≥: {self.score} ‚≠êÔ∏è\n–°–µ—Ä–∏–∏: {self.episodes_aired} –∏–∑ {episodes_all} üì∫\n–°—Å—ã–ª–∫–∞: https://shikimori.one/animes/{self.id}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
def load_subscriptions():
    global subscriptions
    if os.path.exists(subscriptions_file):
        with open(subscriptions_file, "r", encoding="utf-8") as file:
            if os.stat(subscriptions_file).st_size == 0:
                subscriptions = {}
            else:
                subscriptions = json.load(file)
    else:
        subscriptions = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
def save_subscriptions():
    with open(subscriptions_file, "w", encoding="utf-8") as file:
        json.dump(subscriptions, file, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat.id)
    if chat_id not in subscriptions:
        subscriptions[chat_id] = {}
        save_subscriptions()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞"
    keyboard = [
        ["–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∞–Ω–∏–º–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π üì∫ ‚ú®\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–∏–º–µ.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –∞–Ω–∏–º–µ
async def fresh_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat.id)
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if chat_id in last_request_times:
        if current_time - last_request_times[chat_id] < request_interval:
            await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–≤–µ–∂—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ ‚è∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚åõÔ∏è")
            return

    last_request_times[chat_id] = current_time
    animes = get_animes_from_shikimori()

    for anime in animes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –∞–Ω–∏–º–µ
        if chat_id in subscriptions and str(anime.id) in subscriptions[chat_id]:
            button_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
        else:
            button_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

        keyboard = [[InlineKeyboardButton(button_text, callback_data=str(anime.id))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_photo(photo=f"https://shikimori.one{anime.image['original']}", caption=anime.format_anime(), reply_markup=reply_markup)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
def get_current_season():
    year, month, _ = time.localtime()[:3]
    seasons = {
        12: "winter", 1: "winter", 2: "winter",
        3: "spring", 4: "spring", 5: "spring",
        6: "summer", 7: "summer", 8: "summer",
        9: "fall", 10: "fall", 11: "fall"
    }
    return f"{seasons[month]}_{year}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∏–º–µ —Å Shikimori API
def get_animes_from_shikimori():
    season = get_current_season()
    url = f"https://shikimori.one/api/animes?season={season}&kind=tv&limit=99"
    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'pythonBot/1.0'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        animes_data = response.json()
        return [Anime(**anime) for anime in animes_data]
    except requests.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–µ: {e}")
        return []

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
async def toggle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = str(query.message.chat.id)
    anime_id = query.data

    animes = get_animes_from_shikimori()
    anime = next((a for a in animes if str(a.id) == anime_id), None)

    if not anime:
        await query.answer("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if chat_id not in subscriptions:
        subscriptions[chat_id] = {}

    if anime_id in subscriptions[chat_id]:
        del subscriptions[chat_id][anime_id]
        await query.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–Ω–∏–º–µ: {anime.title}.")
    else:
        subscriptions[chat_id][anime_id] = anime.episodes_aired  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —Å–µ—Ä–∏–π
        await query.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–Ω–∏–º–µ: {anime.title}.")

    save_subscriptions()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    button_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if anime_id in subscriptions[chat_id] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    keyboard = [[InlineKeyboardButton(button_text, callback_data=str(anime_id))]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∏
    if query.message.reply_markup.inline_keyboard[0][0].text != button_text:
        await query.message.edit_reply_markup(reply_markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ
async def notify_new_episodes(context: ContextTypes.DEFAULT_TYPE):
    animes = get_animes_from_shikimori()

    for chat_id, subscribed_animes in subscriptions.items():
        for anime in animes:
            anime_id = str(anime.id)
            if anime_id in subscribed_animes:
                previous_episodes = subscribed_animes[anime_id]
                if anime.episodes_aired > previous_episodes:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª-–≤–æ —Å–µ—Ä–∏–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    subscriptions[chat_id][anime_id] = anime.episodes_aired
                    save_subscriptions()

                    await context.bot.send_message(chat_id, text=f"–í—ã—à–ª–∞ –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è –∞–Ω–∏–º–µ: {anime.title}\n–°–µ—Ä–∏–∏: {anime.episodes_aired}")
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {anime.title} ({chat_id})")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    load_subscriptions()

    application = ApplicationBuilder().token(API_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–≤–µ–∂–∏—Ö –∞–Ω–∏–º–µ
    application.add_handler(MessageHandler(filters.TEXT & (filters.Regex("–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞")), fresh_anime))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
    application.add_handler(CallbackQueryHandler(toggle_subscription))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
