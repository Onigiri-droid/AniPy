import json
import os
import time
import logging

import pytz
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
subscriptions = {}  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–∞: {"chat_id": {"anime_id": episodes_aired}}
last_request_times = {}
request_interval = 2 * 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å–≤–µ–∂–µ–π –ø–æ–¥–±–æ—Ä–∫–∏ (2 —á–∞—Å–∞)

subscriptions_file = "subscriptions.json"
API_TOKEN = ('@@@@@')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

cache = {"data": None, "timestamp": 0}
cache_duration = 3600  # 1 —á–∞—Å

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ
class Anime:
    def __init__(self, id, name, russian, image, score, episodes, episodes_aired, **kwargs):
        self.id = id
        self.name = name
        self.title = russian  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'russian' –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        self.image = image
        self.score = score
        self.episodes_all = episodes  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –≤—Å–µ–≥–æ
        self.episodes_aired = episodes_aired  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ–¥—à–∏—Ö —Å–µ—Ä–∏–π

    def format_anime(self):
        title = self.title if self.title else self.name
        episodes_all = str(self.episodes_all) if self.episodes_all > 0 else "?"
        return f"{title}\n–†–µ–π—Ç–∏–Ω–≥: {self.score} ‚≠êÔ∏è\n–°–µ—Ä–∏–∏: {self.episodes_aired} –∏–∑ {episodes_all} üì∫\n–°—Å—ã–ª–∫–∞: https://shikimori.one/animes/{self.id}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
def load_subscriptions():
    global subscriptions
    if os.path.exists(subscriptions_file):
        with open(subscriptions_file, "r", encoding="utf-8") as file:
            if os.stat(subscriptions_file).st_size == 0:
                subscriptions = {}
            else:
                subscriptions = json.load(file)
    else:
        subscriptions = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
def save_subscriptions():
    with open(subscriptions_file, "w", encoding="utf-8") as file:
        json.dump(subscriptions, file, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat.id)
    if chat_id not in subscriptions:
        subscriptions[chat_id] = {}
        save_subscriptions()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞" –∏ "–ü–æ–¥–ø–∏—Å–∫–∏"
    keyboard = [
        ["–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "–ü–æ–¥–ø–∏—Å–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∞–Ω–∏–º–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π üì∫ ‚ú®\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–∏–º–µ, –∏–ª–∏ –Ω–∞ '–ü–æ–¥–ø–∏—Å–∫–∏', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –∞–Ω–∏–º–µ
async def fresh_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat.id)
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if chat_id in last_request_times:
        if current_time - last_request_times[chat_id] < request_interval:
            await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–≤–µ–∂—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ä–∞–∑ –≤ 2 —á–∞—Å–∞ ‚è∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚åõÔ∏è")
            return

    last_request_times[chat_id] = current_time
    animes = get_animes_from_shikimori()

    for anime in animes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –∞–Ω–∏–º–µ
        if chat_id in subscriptions and str(anime.id) in subscriptions[chat_id]:
            button_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
        else:
            button_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

        keyboard = [[InlineKeyboardButton(button_text, callback_data=str(anime.id))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_photo(photo=f"https://shikimori.one{anime.image['original']}", caption=anime.format_anime(), reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat.id)

    if chat_id not in subscriptions or not subscriptions[chat_id]:
        await update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∞–Ω–∏–º–µ.")
        return

    subscribed_anime_ids = subscriptions[chat_id].keys()
    animes = get_animes_from_shikimori()
    subscribed_animes = [anime for anime in animes if str(anime.id) in subscribed_anime_ids]

    if not subscribed_animes:
        await update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∞–Ω–∏–º–µ.")
    else:
        for anime in subscribed_animes:
            keyboard = [[InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=str(anime.id))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_photo(photo=f"https://shikimori.one{anime.image['original']}", caption=anime.format_anime(), reply_markup=reply_markup)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
def get_current_season():
    year, month, _ = time.localtime()[:3]
    seasons = {
        12: "winter", 1: "winter", 2: "winter",
        3: "spring", 4: "spring", 5: "spring",
        6: "summer", 7: "summer", 8: "summer",
        9: "fall", 10: "fall", 11: "fall"
    }
    return f"{seasons[month]}_{year}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∏–º–µ —Å Shikimori API
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
cache = {"data": None, "timestamp": 0}
cache_duration = 3600  # 1 —á–∞—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

def get_animes_from_shikimori():
    current_time = time.time()

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if cache["data"] and current_time - cache["timestamp"] < cache_duration:
        return cache["data"]

    season = get_current_season()
    url = f"https://shikimori.one/api/animes?season={season}&kind=tv&limit=99"
    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'pythonBot/1.0'
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        animes_data = response.json()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∏–º–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        animes = [Anime(**anime) for anime in animes_data]
        sorted_animes = sorted(animes, key=lambda anime: anime.score, reverse=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        cache["data"] = sorted_animes
        cache["timestamp"] = current_time

        return sorted_animes
    except requests.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–µ: {e}")
        return []


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
async def toggle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = str(query.message.chat.id)
    anime_id = query.data

    animes = get_animes_from_shikimori()
    anime = next((a for a in animes if str(a.id) == anime_id), None)

    if not anime:
        await query.answer("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if chat_id not in subscriptions:
        subscriptions[chat_id] = {}

    if anime_id in subscriptions[chat_id]:
        del subscriptions[chat_id][anime_id]
        await query.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–Ω–∏–º–µ: {anime.title}.")
    else:
        subscriptions[chat_id][anime_id] = anime.episodes_aired  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —Å–µ—Ä–∏–π
        await query.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–Ω–∏–º–µ: {anime.title}.")

    save_subscriptions()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    button_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if anime_id in subscriptions[chat_id] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    keyboard = [[InlineKeyboardButton(button_text, callback_data=str(anime_id))]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∏
    if query.message.reply_markup.inline_keyboard[0][0].text != button_text:
        await query.message.edit_reply_markup(reply_markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ
async def notify_new_episodes(context: ContextTypes.DEFAULT_TYPE):
    animes = get_animes_from_shikimori()

    for chat_id, subscribed_animes in subscriptions.items():
        for anime in animes:
            anime_id = str(anime.id)
            if anime_id in subscribed_animes:
                previous_episodes = subscribed_animes[anime_id]
                if anime.episodes_aired > previous_episodes:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª-–≤–æ —Å–µ—Ä–∏–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    subscriptions[chat_id][anime_id] = anime.episodes_aired
                    save_subscriptions()

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
                    button_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if anime_id in subscriptions[chat_id] else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                    keyboard = [[InlineKeyboardButton(button_text, callback_data=str(anime.id))]]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –≤ –ø–æ–¥–±–æ—Ä–∫–µ, —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –æ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=f"https://shikimori.one{anime.image['original']}",
                        caption=f"–í—ã—à–ª–∞ –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è –∞–Ω–∏–º–µ: {anime.format_anime()}",
                        reply_markup=reply_markup
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {anime.title} ({chat_id})")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    load_subscriptions()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = ApplicationBuilder().token(API_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("–°–≤–µ–∂–∞—è –ø–æ–¥–±–æ—Ä–∫–∞"), fresh_anime))
    application.add_handler(MessageHandler(filters.Regex("–ü–æ–¥–ø–∏—Å–∫–∏"), show_subscriptions))
    application.add_handler(CallbackQueryHandler(toggle_subscription))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π
    scheduler = AsyncIOScheduler(timezone=pytz.utc)  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    scheduler.add_job(notify_new_episodes, 'interval', seconds=5, args=[application])
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()